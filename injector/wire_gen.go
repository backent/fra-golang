// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	auth3 "github.com/backent/fra-golang/controllers/auth"
	dashboard2 "github.com/backent/fra-golang/controllers/dashboard"
	document3 "github.com/backent/fra-golang/controllers/document"
	document_tracker3 "github.com/backent/fra-golang/controllers/document_tracker"
	notification3 "github.com/backent/fra-golang/controllers/notification"
	risk3 "github.com/backent/fra-golang/controllers/risk"
	user3 "github.com/backent/fra-golang/controllers/user"
	user_registration3 "github.com/backent/fra-golang/controllers/user_registration"
	"github.com/backent/fra-golang/libs"
	"github.com/backent/fra-golang/middlewares"
	"github.com/backent/fra-golang/repositories/auth"
	"github.com/backent/fra-golang/repositories/document"
	"github.com/backent/fra-golang/repositories/document_tracker"
	"github.com/backent/fra-golang/repositories/notification"
	"github.com/backent/fra-golang/repositories/rejectnote"
	"github.com/backent/fra-golang/repositories/risk"
	"github.com/backent/fra-golang/repositories/user"
	"github.com/backent/fra-golang/repositories/user_registration"
	"github.com/backent/fra-golang/repositories/users_history_login"
	auth2 "github.com/backent/fra-golang/services/auth"
	"github.com/backent/fra-golang/services/dashboard"
	document2 "github.com/backent/fra-golang/services/document"
	document_tracker2 "github.com/backent/fra-golang/services/document_tracker"
	notification2 "github.com/backent/fra-golang/services/notification"
	risk2 "github.com/backent/fra-golang/services/risk"
	user2 "github.com/backent/fra-golang/services/user"
	user_registration2 "github.com/backent/fra-golang/services/user_registration"
	"github.com/google/wire"
	"github.com/julienschmidt/httprouter"
)

// Injectors from injector.go:

func InitializeRouter() *httprouter.Router {
	db := libs.NewDatabase()
	repositoryUserInterface := user.NewRepositoryUserImpl()
	validate := libs.NewValidator()
	repositoryAuthInterface := auth.NewRepositoryAuthJWTImpl()
	userMiddleware := middlewares.NewUserMiddleware(validate, repositoryUserInterface, repositoryAuthInterface)
	serviceUserInterface := user2.NewServiceUserImpl(db, repositoryUserInterface, userMiddleware)
	controllerUserInterface := user3.NewControllerUserImpl(serviceUserInterface)
	repositoryRiskInterface := risk.NewRepositoryRiskImpl()
	riskMiddleware := middlewares.NewRiskMiddleware(validate, repositoryRiskInterface, repositoryAuthInterface)
	serviceRiskInterface := risk2.NewServiceRiskImpl(db, repositoryRiskInterface, riskMiddleware)
	controllerRiskInterface := risk3.NewControllerRiskImpl(serviceRiskInterface)
	authMiddleware := middlewares.NewAuthMiddleware(validate, repositoryUserInterface, repositoryAuthInterface)
	serviceAuthInterface := auth2.NewServiceAuthImpl(db, repositoryAuthInterface, authMiddleware)
	controllerAuthInterface := auth3.NewControllerAuthImpl(serviceAuthInterface)
	client := libs.NewElastic()
	repositoryDocumentInterface := document.NewRepositoryDocumentImpl()
	documentMiddleware := middlewares.NewDocumentMiddleware(validate, repositoryDocumentInterface, repositoryAuthInterface, repositoryUserInterface, repositoryRiskInterface)
	repositoryRejectNoteInterface := rejectnote.NewRepositoryRejectNote()
	repositoryNotificationInterface := notification.NewRepositoryNotificationImpl()
	repositoryDocumentSearchInterface := document.NewRepositoryDocumentSearchEsImpl()
	repositoryDocumentTrackerInterface := document_tracker.NewRepositoryDocumentTrackerImpl()
	serviceDocumentInterface := document2.NewServiceDocumentImpl(db, client, repositoryDocumentInterface, documentMiddleware, repositoryRiskInterface, repositoryRejectNoteInterface, repositoryUserInterface, repositoryNotificationInterface, repositoryDocumentSearchInterface, repositoryDocumentTrackerInterface)
	controllerDocumentInterface := document3.NewControllerDocumentImpl(serviceDocumentInterface)
	notificationMiddleware := middlewares.NewNotificationMiddleware(validate, repositoryNotificationInterface, repositoryAuthInterface, repositoryUserInterface, repositoryRiskInterface)
	serviceNotificationInterface := notification2.NewServiceNotificationImpl(db, repositoryNotificationInterface, notificationMiddleware, repositoryRiskInterface, repositoryRejectNoteInterface)
	controllerNotificationInterface := notification3.NewControllerNotificationImpl(serviceNotificationInterface)
	repositoryUserRegistrationInterface := user_registration.NewRepositoryUserRegistrationImpl()
	userRegistrationMiddleware := middlewares.NewUserRegistrationMiddleware(validate, repositoryUserRegistrationInterface, repositoryAuthInterface, repositoryUserInterface)
	serviceUserRegistrationInterface := user_registration2.NewServiceUserRegistrationImpl(db, repositoryUserRegistrationInterface, userRegistrationMiddleware)
	controllerUserRegistrationInterface := user_registration3.NewControllerUserRegistrationImpl(serviceUserRegistrationInterface)
	repositoryUserHistoryLoginInterface := users_history_login.NewRepositoryUserHistoryLoginImpl()
	dashboardMiddleware := middlewares.NewDashboardMiddleware(validate, repositoryAuthInterface, repositoryUserInterface)
	serviceDashboardInterface := dashboard.NewServiceDashboardImpl(db, repositoryUserInterface, repositoryDocumentInterface, repositoryDocumentTrackerInterface, repositoryUserHistoryLoginInterface, dashboardMiddleware)
	controllerDashboardInterface := dashboard2.NewControllerDashboardImpl(serviceDashboardInterface)
	documentTrackerMiddleware := middlewares.NewDocumentTrackerMiddleware(validate, repositoryDocumentInterface, repositoryAuthInterface)
	serviceDocumentTrackerInterface := document_tracker2.NewServiceDocumentTrackerImpl(db, repositoryDocumentTrackerInterface, documentTrackerMiddleware)
	controllerDocumentTrackerInterface := document_tracker3.NewControllerDocumentTrackerImpl(serviceDocumentTrackerInterface)
	router := libs.NewRouter(controllerUserInterface, controllerRiskInterface, controllerAuthInterface, controllerDocumentInterface, controllerNotificationInterface, controllerUserRegistrationInterface, controllerDashboardInterface, controllerDocumentTrackerInterface)
	return router
}

// injector.go:

var UserSet = wire.NewSet(user3.NewControllerUserImpl, user2.NewServiceUserImpl, user.NewRepositoryUserImpl, middlewares.NewUserMiddleware)

var RiskSet = wire.NewSet(risk3.NewControllerRiskImpl, risk2.NewServiceRiskImpl, risk.NewRepositoryRiskImpl, middlewares.NewRiskMiddleware)

var DocumentSet = wire.NewSet(document3.NewControllerDocumentImpl, document2.NewServiceDocumentImpl, document.NewRepositoryDocumentImpl, document.NewRepositoryDocumentSearchEsImpl, middlewares.NewDocumentMiddleware)

var DocumentTrackerSet = wire.NewSet(document_tracker3.NewControllerDocumentTrackerImpl, document_tracker2.NewServiceDocumentTrackerImpl, document_tracker.NewRepositoryDocumentTrackerImpl, middlewares.NewDocumentTrackerMiddleware)

var NotificationSet = wire.NewSet(notification3.NewControllerNotificationImpl, notification2.NewServiceNotificationImpl, notification.NewRepositoryNotificationImpl, middlewares.NewNotificationMiddleware)

var AuthSet = wire.NewSet(auth3.NewControllerAuthImpl, auth2.NewServiceAuthImpl, auth.NewRepositoryAuthJWTImpl, middlewares.NewAuthMiddleware)

var RejectNoteSet = wire.NewSet(rejectnote.NewRepositoryRejectNote)

var UserRegistrationSet = wire.NewSet(user_registration3.NewControllerUserRegistrationImpl, user_registration2.NewServiceUserRegistrationImpl, user_registration.NewRepositoryUserRegistrationImpl, middlewares.NewUserRegistrationMiddleware)

var UserHistoryLoginSet = wire.NewSet(users_history_login.NewRepositoryUserHistoryLoginImpl)

var DashboardSet = wire.NewSet(dashboard2.NewControllerDashboardImpl, dashboard.NewServiceDashboardImpl, middlewares.NewDashboardMiddleware)
