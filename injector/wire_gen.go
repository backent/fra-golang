// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	document3 "github.com/backent/fra-golang/controllers/document"
	user3 "github.com/backent/fra-golang/controllers/user"
	"github.com/backent/fra-golang/libs"
	"github.com/backent/fra-golang/middlewares"
	"github.com/backent/fra-golang/repositories/document"
	"github.com/backent/fra-golang/repositories/user"
	document2 "github.com/backent/fra-golang/services/document"
	user2 "github.com/backent/fra-golang/services/user"
	"github.com/google/wire"
	"github.com/julienschmidt/httprouter"
)

// Injectors from injector.go:

func InitializeRouter() *httprouter.Router {
	db := libs.NewDatabase()
	repositoryUserInterface := user.NewRepositoryUserImpl()
	validate := libs.NewValidator()
	userMiddleware := middlewares.NewUserMiddleware(validate, repositoryUserInterface)
	serviceUserInterface := user2.NewServiceUserImpl(db, repositoryUserInterface, userMiddleware)
	controllerUserInterface := user3.NewControllerUserImpl(serviceUserInterface)
	repositoryDocumentInterface := document.NewRepositoryDocumentImpl()
	documentMiddleware := middlewares.NewDocumentMiddleware(validate, repositoryDocumentInterface)
	serviceDocumentInterface := document2.NewServiceDocumentImpl(db, repositoryDocumentInterface, documentMiddleware)
	controllerDocumentInterface := document3.NewControllerDocumentImpl(serviceDocumentInterface)
	router := libs.NewRouter(controllerUserInterface, controllerDocumentInterface)
	return router
}

// injector.go:

var UserSet = wire.NewSet(user3.NewControllerUserImpl, user2.NewServiceUserImpl, user.NewRepositoryUserImpl, middlewares.NewUserMiddleware)

var DocumentSet = wire.NewSet(document3.NewControllerDocumentImpl, document2.NewServiceDocumentImpl, document.NewRepositoryDocumentImpl, middlewares.NewDocumentMiddleware)
